const input =
`
UULLULLUULLLURDLDUURRDRRLDURDULLRURDUDULLLUULURURLRDRRRRULDRUULLLLUUDURDULDRRDRUDLRRLDLUDLDDRURURUURRRDDDLLRUDURDULUULLRRULLRULDUDRDRLDLURURUDDUDLURUDUDURLURURRURLUDDRURRDLUURLLRURRDUDLULULUDULDLLRRRDLRDLDUDRDDDRRUURRRRRUURRDRRDLURDRRURDLLUULULLRURDLDDDRRLLRRUURULURUUDDLRRUDDRURUUDLRLRDLRURRRDULLDLRUDDUULRDULURUURDULUDLLRRLDDLRDLRUDRLDDRLRRRDURDULLRRRDRRLUURURDRRDRRLDLUDURURLDUURDRUDRDDRLDRRLDLURURULLUURUDUUDLRLL
LLLULLULDDULRLLURLLLRUUDDLRUULRLULLDLLRRDRLRLRLLDRUUURULDRDDLUDLLDUDULLLRLULLLRULDRDRUDLLRLRLLUDULRRRLDRUULDDULLDULULLUDUDLDRDURDLDLLDUDRRRDLUURRUURULLURLDURLRRLLDDUUULDRLUUDUDLURLULUDURRDRLLDDDDDRRULLRLDULULDDRUURRDLUDDDUDURDDRDRULULLLLUURDURUUUULUDLRURRULRDDRURURLLRLUUDUUURDLLDDLUDRLLLUDLLLLULRLURDRRRDUUDLLDLDDDURRDDRURUURDDRURRLDDDURDLLUURUUULRLUURRUDRLLDLURDUDRLULDLRLULULUDDLRDUDRUDLUULUULDURDRRRRLRULLUDRDDRDLDUDRDRRLDLLLLUDDLRULDLLDDUULDDRRULRRUURUDRDURLLLDDUUDRUUDLULLDR
UDUUULLDDDDLUDLDULRLRDLULLDDRULDURRLURRUDLRRUDURRDUDRRRUULRLLRLUDLDRRDUURDDRDRDUUUDUDLDLLRRLUURLUUUDDDUURLULURRLURRRDRDURURUDRLRUURUDRUDDDRDRDLDRDURDLDRRDUUDLLURLDDURRRLULDRDRLLRLLLRURLDURDRLDRUURRLDLDRLDDDRLDLRLDURURLLLLDDRDUDLRULULLRDDLLUDRDRRLUUULDRLDURURDUDURLLDRRDUULDUUDLLDDRUUULRRULDDUDRDRLRULUUDUURULLDLLURLRRLDDDLLDRRDDRLDDLURRUDURULUDLLLDUDDLDLDLRUDUDRDUDDLDDLDULURDDUDRRUUURLDUURULLRLULUURLLLLDUUDURUUDUULULDRULRLRDULDLLURDLRUUUDDURLLLLDUDRLUUDUDRRURURRDRDDRULDLRLURDLLRRDRUUUURLDRURDUUDLDURUDDLRDDDDURRLRLUDRRDDURDDRLDDLLRR
ULDRUDURUDULLUDUDURLDLLRRULRRULRUDLULLLDRULLDURUULDDURDUUDLRDRUDUDDLDRDLUULRRDLRUULULUUUDUUDDRDRLLULLRRDLRRLUDRLULLUUUUURRDURLLRURRULLLRLURRULRDUURRLDDRRDRLULDDRRDRLULLRDLRRURUDURULRLUDRUDLUDDDUDUDDUDLLRDLLDRURULUDRLRRULRDDDDDRLDLRRLUUDLUURRDURRDLDLDUDRLULLULRLDRDUDLRULLULLRLDDRURLLLRLDDDLLLRURDDDLLUDLDLRLUULLLRULDRRDUDLRRDDULRLLDUURLLLLLDRULDRLLLUURDURRULURLDDLRRUDULUURRLULRDRDDLULULRRURLDLRRRUDURURDURDULURULLRLDD
DURLRRRDRULDLULUDULUURURRLULUDLURURDDURULLRRUUDLRURLDLRUDULDLLRRULLLLRRLRUULDLDLLRDUDLLRLULRLLUUULULRDLDLRRURLUDDRRLUUDDRRUDDRRURLRRULLDDULLLURRULUDLRRRURRULRLLLRULLRRURDRLURULLDULRLLLULLRLRLLLDRRRRDDDDDDULUUDUDULRURDRUDRLUULURDURLURRDRRRRDRRLLLLUDLRRDURURLLULUDDLRLRLRRUURLLURLDUULLRRDURRULRULURLLLRLUURRULLLURDDDRURDUDDULLRULUUUDDRURUUDUURURRDRURDUDRLLRRULURUDLDURLDLRRRRLLUURRLULDDDUUUURUULDLDRLDUDULDRRULDRDULURRUURDU
`

// const input =
// `
// ULL
// RRDDD
// LURDL
// UUUUD
// `

class keypad {
  constructor() {
    this.pos = {x:1,y:1}
  }

  move(dir) {
    switch (dir) {
      case 'U':
        this.pos.y = Math.max(this.pos.y-1, 0)
        break
      case 'L':
        this.pos.x = Math.max(this.pos.x-1, 0)
        break
      case 'D':
        this.pos.y = Math.min(this.pos.y+1, 2)
        break
      case 'R':
        this.pos.x = Math.min(this.pos.x+1, 2)
        break
    }
  }

  num() { return this.pos.y * 3 + this.pos.x + 1 }
}

const k = new keypad()

for (const line of input.split('\n')) {
  if (!line) continue
  for (const c of line) {
    k.move(c)
  }
  console.log(k.num())
}

class diamondKeypad {
  constructor() {
    this.pos = {x:-2,y:0}
  }

  move(dir) {
    const newPos = {
      x: this.pos.x,
      y: this.pos.y,
    }

    switch (dir) {
      case 'U':
        newPos.y = newPos.y+1
        break
      case 'L':
        newPos.x = newPos.x-1
        break
      case 'D':
        newPos.y = newPos.y-1
        break
      case 'R':
        newPos.x = newPos.x+1
        break
    }

    if (Math.abs(newPos.x) + Math.abs(newPos.y) <= 2) {
      this.pos = newPos
    }
  }

  num() {
    const keypad = {
      '2':                       {'0': '1'},
      '1':            {'-1': '2', '0': '3', '1': '4'},
      '0': {'-2': '5', '-1': '6', '0': '7', '2': '8', '3': '9'},
      '-1':           {'-1': 'A', '0': 'B', '1': 'C'},
      '-2':                      {'0': 'D'},
    }

    return keypad[this.pos.y][this.pos.x]
  }
}

const k2 = new diamondKeypad()
console.log('diamond keypad')
for (const line of input.split('\n')) {
  if (!line) continue
  for (const c of line) {
    k2.move(c)
  }
  console.log(k2.num())
}
